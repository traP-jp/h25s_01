/* tslint:disable */
/* eslint-disable */
/**
 * 25春ハッカソン1班 API
 * 25春ハッカソン1班
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiV1ReviewsPostRequest
 */
export interface ApiV1ReviewsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReviewsPostRequest
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReviewsPostRequest
     */
    'shop': string;
    /**
     * 
     * @type {number}
     * @memberof ApiV1ReviewsPostRequest
     */
    'rating': ApiV1ReviewsPostRequestRatingEnum;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ReviewsPostRequest
     */
    'content'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ReviewsPostRequest
     */
    'images'?: Array<string>;
}

export const ApiV1ReviewsPostRequestRatingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ApiV1ReviewsPostRequestRatingEnum = typeof ApiV1ReviewsPostRequestRatingEnum[keyof typeof ApiV1ReviewsPostRequestRatingEnum];

/**
 * 
 * @export
 * @interface ApiV1ShopsIdImagesDeleteRequest
 */
export interface ApiV1ShopsIdImagesDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsIdImagesDeleteRequest
     */
    'image_url': string;
}
/**
 * 
 * @export
 * @interface ApiV1ShopsIdImagesPost200Response
 */
export interface ApiV1ShopsIdImagesPost200Response {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsIdImagesPost200Response
     */
    'image_url'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1ShopsPostRequest
 */
export interface ApiV1ShopsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'post_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'latitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'longitude'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ShopsPostRequest
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApiV1ShopsPostRequest
     */
    'payment_methods'?: Array<string>;
    /**
     * 関連する駅のID配列
     * @type {Array<string>}
     * @memberof ApiV1ShopsPostRequest
     */
    'stations'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApiV1ShopsPostRequest
     */
    'registerer'?: string;
}
/**
 * 
 * @export
 * @interface ApiV1StationsPostRequest
 */
export interface ApiV1StationsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiV1StationsPostRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Review
 */
export interface Review {
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'id': string;
    /**
     * レビュー投稿者のユーザーID
     * @type {string}
     * @memberof Review
     */
    'author': string;
    /**
     * レビュー対象の店舗ID
     * @type {string}
     * @memberof Review
     */
    'shop': string;
    /**
     * 評価（0から3まで）
     * @type {number}
     * @memberof Review
     */
    'rating'?: ReviewRatingEnum;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Review
     */
    'content'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Review
     */
    'images'?: Array<string>;
}

export const ReviewRatingEnum = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3
} as const;

export type ReviewRatingEnum = typeof ReviewRatingEnum[keyof typeof ReviewRatingEnum];

/**
 * 
 * @export
 * @interface Shop
 */
export interface Shop {
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'post_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'latitude'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'longitude'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Shop
     */
    'images'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Shop
     */
    'payment_methods'?: Array<string>;
    /**
     * 関連する駅のID配列
     * @type {Array<string>}
     * @memberof Shop
     */
    'stations'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'registerer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Shop
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Station
 */
export interface Station {
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Station
     */
    'updated_at'?: string;
}

/**
 * ReviewsApi - axios parameter creator
 * @export
 */
export const ReviewsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 全レビューの一覧を取得
         * @summary レビュー一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {number} [offset] 取得開始位置
         * @param {string} [after] 
         * @param {string} [before] 指定日時以降のレビューを取得
         * @param {string} [shopId] 店舗IDでフィルタ
         * @param {string} [authorId] 投稿者IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsGet: async (limit?: number, offset?: number, after?: string, before?: string, shopId?: string, authorId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = (after as any instanceof Date) ?
                    (after as any).toISOString() :
                    after;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = (before as any instanceof Date) ?
                    (before as any).toISOString() :
                    before;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shop_id'] = shopId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDのレビューを削除
         * @summary レビュー削除
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ReviewsIdDelete', 'id', id)
            const localVarPath = `/api/v1/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDのレビュー詳細を取得
         * @summary レビュー詳細取得
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ReviewsIdGet', 'id', id)
            const localVarPath = `/api/v1/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたレビューに画像をアップロード
         * @summary レビュー画像アップロード
         * @param {string} id レビューID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdImagesPost: async (id: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ReviewsIdImagesPost', 'id', id)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('apiV1ReviewsIdImagesPost', 'image', image)
            const localVarPath = `/api/v1/reviews/{id}/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDのレビューを更新
         * @summary レビュー更新
         * @param {string} id レビューID
         * @param {Review} review 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdPut: async (id: string, review: Review, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ReviewsIdPut', 'id', id)
            // verify required parameter 'review' is not null or undefined
            assertParamExists('apiV1ReviewsIdPut', 'review', review)
            const localVarPath = `/api/v1/reviews/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(review, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規レビューを投稿
         * @summary レビュー投稿
         * @param {ApiV1ReviewsPostRequest} apiV1ReviewsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsPost: async (apiV1ReviewsPostRequest: ApiV1ReviewsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ReviewsPostRequest' is not null or undefined
            assertParamExists('apiV1ReviewsPost', 'apiV1ReviewsPostRequest', apiV1ReviewsPostRequest)
            const localVarPath = `/api/v1/reviews`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ReviewsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewsApi - functional programming interface
 * @export
 */
export const ReviewsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReviewsApiAxiosParamCreator(configuration)
    return {
        /**
         * 全レビューの一覧を取得
         * @summary レビュー一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {number} [offset] 取得開始位置
         * @param {string} [after] 
         * @param {string} [before] 指定日時以降のレビューを取得
         * @param {string} [shopId] 店舗IDでフィルタ
         * @param {string} [authorId] 投稿者IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsGet(limit?: number, offset?: number, after?: string, before?: string, shopId?: string, authorId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Review>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsGet(limit, offset, after, before, shopId, authorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDのレビューを削除
         * @summary レビュー削除
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDのレビュー詳細を取得
         * @summary レビュー詳細取得
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたレビューに画像をアップロード
         * @summary レビュー画像アップロード
         * @param {string} id レビューID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ShopsIdImagesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsIdImagesPost(id, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsIdImagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDのレビューを更新
         * @summary レビュー更新
         * @param {string} id レビューID
         * @param {Review} review 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsIdPut(id: string, review: Review, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsIdPut(id, review, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新規レビューを投稿
         * @summary レビュー投稿
         * @param {ApiV1ReviewsPostRequest} apiV1ReviewsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ReviewsPost(apiV1ReviewsPostRequest: ApiV1ReviewsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Review>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ReviewsPost(apiV1ReviewsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReviewsApi.apiV1ReviewsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReviewsApi - factory interface
 * @export
 */
export const ReviewsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReviewsApiFp(configuration)
    return {
        /**
         * 全レビューの一覧を取得
         * @summary レビュー一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {number} [offset] 取得開始位置
         * @param {string} [after] 
         * @param {string} [before] 指定日時以降のレビューを取得
         * @param {string} [shopId] 店舗IDでフィルタ
         * @param {string} [authorId] 投稿者IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsGet(limit?: number, offset?: number, after?: string, before?: string, shopId?: string, authorId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Review>> {
            return localVarFp.apiV1ReviewsGet(limit, offset, after, before, shopId, authorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDのレビューを削除
         * @summary レビュー削除
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ReviewsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDのレビュー詳細を取得
         * @summary レビュー詳細取得
         * @param {string} id レビューID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.apiV1ReviewsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたレビューに画像をアップロード
         * @summary レビュー画像アップロード
         * @param {string} id レビューID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ShopsIdImagesPost200Response> {
            return localVarFp.apiV1ReviewsIdImagesPost(id, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDのレビューを更新
         * @summary レビュー更新
         * @param {string} id レビューID
         * @param {Review} review 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsIdPut(id: string, review: Review, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.apiV1ReviewsIdPut(id, review, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規レビューを投稿
         * @summary レビュー投稿
         * @param {ApiV1ReviewsPostRequest} apiV1ReviewsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ReviewsPost(apiV1ReviewsPostRequest: ApiV1ReviewsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Review> {
            return localVarFp.apiV1ReviewsPost(apiV1ReviewsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReviewsApi - object-oriented interface
 * @export
 * @class ReviewsApi
 * @extends {BaseAPI}
 */
export class ReviewsApi extends BaseAPI {
    /**
     * 全レビューの一覧を取得
     * @summary レビュー一覧取得
     * @param {number} [limit] 取得件数制限
     * @param {number} [offset] 取得開始位置
     * @param {string} [after] 
     * @param {string} [before] 指定日時以降のレビューを取得
     * @param {string} [shopId] 店舗IDでフィルタ
     * @param {string} [authorId] 投稿者IDでフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsGet(limit?: number, offset?: number, after?: string, before?: string, shopId?: string, authorId?: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsGet(limit, offset, after, before, shopId, authorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDのレビューを削除
     * @summary レビュー削除
     * @param {string} id レビューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDのレビュー詳細を取得
     * @summary レビュー詳細取得
     * @param {string} id レビューID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたレビューに画像をアップロード
     * @summary レビュー画像アップロード
     * @param {string} id レビューID
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsIdImagesPost(id, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDのレビューを更新
     * @summary レビュー更新
     * @param {string} id レビューID
     * @param {Review} review 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsIdPut(id: string, review: Review, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsIdPut(id, review, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規レビューを投稿
     * @summary レビュー投稿
     * @param {ApiV1ReviewsPostRequest} apiV1ReviewsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewsApi
     */
    public apiV1ReviewsPost(apiV1ReviewsPostRequest: ApiV1ReviewsPostRequest, options?: RawAxiosRequestConfig) {
        return ReviewsApiFp(this.configuration).apiV1ReviewsPost(apiV1ReviewsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShopsApi - axios parameter creator
 * @export
 */
export const ShopsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 全店舗の一覧を取得します
         * @summary 店舗一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [latitude] 緯度（位置検索用）
         * @param {string} [longitude] 経度（位置検索用）
         * @param {number} [radius] 検索半径（km）
         * @param {string} [stationId] 駅IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsGet: async (limit?: number, latitude?: string, longitude?: string, radius?: number, stationId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['longitude'] = longitude;
            }

            if (radius !== undefined) {
                localVarQueryParameter['radius'] = radius;
            }

            if (stationId !== undefined) {
                localVarQueryParameter['station_id'] = stationId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの店舗を削除
         * @summary 店舗削除
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ShopsIdDelete', 'id', id)
            const localVarPath = `/api/v1/shops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの店舗詳細情報を取得
         * @summary 店舗詳細取得
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ShopsIdGet', 'id', id)
            const localVarPath = `/api/v1/shops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された店舗の画像を削除
         * @summary 店舗画像削除
         * @param {string} id 店舗ID
         * @param {ApiV1ShopsIdImagesDeleteRequest} apiV1ShopsIdImagesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdImagesDelete: async (id: string, apiV1ShopsIdImagesDeleteRequest: ApiV1ShopsIdImagesDeleteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ShopsIdImagesDelete', 'id', id)
            // verify required parameter 'apiV1ShopsIdImagesDeleteRequest' is not null or undefined
            assertParamExists('apiV1ShopsIdImagesDelete', 'apiV1ShopsIdImagesDeleteRequest', apiV1ShopsIdImagesDeleteRequest)
            const localVarPath = `/api/v1/shops/{id}/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ShopsIdImagesDeleteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された店舗に画像をアップロード
         * @summary 店舗画像アップロード
         * @param {string} id 店舗ID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdImagesPost: async (id: string, image: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ShopsIdImagesPost', 'id', id)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('apiV1ShopsIdImagesPost', 'image', image)
            const localVarPath = `/api/v1/shops/{id}/images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの店舗情報を更新
         * @summary 店舗情報更新
         * @param {string} id 店舗ID
         * @param {Shop} shop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdPut: async (id: string, shop: Shop, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1ShopsIdPut', 'id', id)
            // verify required parameter 'shop' is not null or undefined
            assertParamExists('apiV1ShopsIdPut', 'shop', shop)
            const localVarPath = `/api/v1/shops/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shop, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規店舗を登録します
         * @summary 店舗作成
         * @param {ApiV1ShopsPostRequest} apiV1ShopsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsPost: async (apiV1ShopsPostRequest: ApiV1ShopsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1ShopsPostRequest' is not null or undefined
            assertParamExists('apiV1ShopsPost', 'apiV1ShopsPostRequest', apiV1ShopsPostRequest)
            const localVarPath = `/api/v1/shops`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1ShopsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShopsApi - functional programming interface
 * @export
 */
export const ShopsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShopsApiAxiosParamCreator(configuration)
    return {
        /**
         * 全店舗の一覧を取得します
         * @summary 店舗一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [latitude] 緯度（位置検索用）
         * @param {string} [longitude] 経度（位置検索用）
         * @param {number} [radius] 検索半径（km）
         * @param {string} [stationId] 駅IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsGet(limit?: number, latitude?: string, longitude?: string, radius?: number, stationId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shop>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsGet(limit, latitude, longitude, radius, stationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの店舗を削除
         * @summary 店舗削除
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの店舗詳細情報を取得
         * @summary 店舗詳細取得
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された店舗の画像を削除
         * @summary 店舗画像削除
         * @param {string} id 店舗ID
         * @param {ApiV1ShopsIdImagesDeleteRequest} apiV1ShopsIdImagesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsIdImagesDelete(id: string, apiV1ShopsIdImagesDeleteRequest: ApiV1ShopsIdImagesDeleteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsIdImagesDelete(id, apiV1ShopsIdImagesDeleteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsIdImagesDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された店舗に画像をアップロード
         * @summary 店舗画像アップロード
         * @param {string} id 店舗ID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1ShopsIdImagesPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsIdImagesPost(id, image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsIdImagesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの店舗情報を更新
         * @summary 店舗情報更新
         * @param {string} id 店舗ID
         * @param {Shop} shop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsIdPut(id: string, shop: Shop, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsIdPut(id, shop, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新規店舗を登録します
         * @summary 店舗作成
         * @param {ApiV1ShopsPostRequest} apiV1ShopsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShopsPost(apiV1ShopsPostRequest: ApiV1ShopsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shop>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShopsPost(apiV1ShopsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ShopsApi.apiV1ShopsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ShopsApi - factory interface
 * @export
 */
export const ShopsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShopsApiFp(configuration)
    return {
        /**
         * 全店舗の一覧を取得します
         * @summary 店舗一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [latitude] 緯度（位置検索用）
         * @param {string} [longitude] 経度（位置検索用）
         * @param {number} [radius] 検索半径（km）
         * @param {string} [stationId] 駅IDでフィルタ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsGet(limit?: number, latitude?: string, longitude?: string, radius?: number, stationId?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Shop>> {
            return localVarFp.apiV1ShopsGet(limit, latitude, longitude, radius, stationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの店舗を削除
         * @summary 店舗削除
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ShopsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの店舗詳細情報を取得
         * @summary 店舗詳細取得
         * @param {string} id 店舗ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Shop> {
            return localVarFp.apiV1ShopsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された店舗の画像を削除
         * @summary 店舗画像削除
         * @param {string} id 店舗ID
         * @param {ApiV1ShopsIdImagesDeleteRequest} apiV1ShopsIdImagesDeleteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdImagesDelete(id: string, apiV1ShopsIdImagesDeleteRequest: ApiV1ShopsIdImagesDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1ShopsIdImagesDelete(id, apiV1ShopsIdImagesDeleteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された店舗に画像をアップロード
         * @summary 店舗画像アップロード
         * @param {string} id 店舗ID
         * @param {File} image 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig): AxiosPromise<ApiV1ShopsIdImagesPost200Response> {
            return localVarFp.apiV1ShopsIdImagesPost(id, image, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの店舗情報を更新
         * @summary 店舗情報更新
         * @param {string} id 店舗ID
         * @param {Shop} shop 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsIdPut(id: string, shop: Shop, options?: RawAxiosRequestConfig): AxiosPromise<Shop> {
            return localVarFp.apiV1ShopsIdPut(id, shop, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規店舗を登録します
         * @summary 店舗作成
         * @param {ApiV1ShopsPostRequest} apiV1ShopsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShopsPost(apiV1ShopsPostRequest: ApiV1ShopsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Shop> {
            return localVarFp.apiV1ShopsPost(apiV1ShopsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShopsApi - object-oriented interface
 * @export
 * @class ShopsApi
 * @extends {BaseAPI}
 */
export class ShopsApi extends BaseAPI {
    /**
     * 全店舗の一覧を取得します
     * @summary 店舗一覧取得
     * @param {number} [limit] 取得件数制限
     * @param {string} [latitude] 緯度（位置検索用）
     * @param {string} [longitude] 経度（位置検索用）
     * @param {number} [radius] 検索半径（km）
     * @param {string} [stationId] 駅IDでフィルタ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsGet(limit?: number, latitude?: string, longitude?: string, radius?: number, stationId?: string, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsGet(limit, latitude, longitude, radius, stationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの店舗を削除
     * @summary 店舗削除
     * @param {string} id 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの店舗詳細情報を取得
     * @summary 店舗詳細取得
     * @param {string} id 店舗ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された店舗の画像を削除
     * @summary 店舗画像削除
     * @param {string} id 店舗ID
     * @param {ApiV1ShopsIdImagesDeleteRequest} apiV1ShopsIdImagesDeleteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsIdImagesDelete(id: string, apiV1ShopsIdImagesDeleteRequest: ApiV1ShopsIdImagesDeleteRequest, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsIdImagesDelete(id, apiV1ShopsIdImagesDeleteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された店舗に画像をアップロード
     * @summary 店舗画像アップロード
     * @param {string} id 店舗ID
     * @param {File} image 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsIdImagesPost(id: string, image: File, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsIdImagesPost(id, image, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの店舗情報を更新
     * @summary 店舗情報更新
     * @param {string} id 店舗ID
     * @param {Shop} shop 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsIdPut(id: string, shop: Shop, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsIdPut(id, shop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規店舗を登録します
     * @summary 店舗作成
     * @param {ApiV1ShopsPostRequest} apiV1ShopsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShopsApi
     */
    public apiV1ShopsPost(apiV1ShopsPostRequest: ApiV1ShopsPostRequest, options?: RawAxiosRequestConfig) {
        return ShopsApiFp(this.configuration).apiV1ShopsPost(apiV1ShopsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StationsApi - axios parameter creator
 * @export
 */
export const StationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 全駅の一覧を取得します
         * @summary 駅一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [name] 駅名で部分一致検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsGet: async (limit?: number, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/stations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの駅を削除します
         * @summary 駅削除
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1StationsIdDelete', 'id', id)
            const localVarPath = `/api/v1/stations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの駅詳細情報を取得
         * @summary 駅詳細取得
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1StationsIdGet', 'id', id)
            const localVarPath = `/api/v1/stations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたIDの駅情報を更新
         * @summary 駅情報更新
         * @param {string} id 駅ID
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdPut: async (id: string, apiV1StationsPostRequest: ApiV1StationsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1StationsIdPut', 'id', id)
            // verify required parameter 'apiV1StationsPostRequest' is not null or undefined
            assertParamExists('apiV1StationsIdPut', 'apiV1StationsPostRequest', apiV1StationsPostRequest)
            const localVarPath = `/api/v1/stations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1StationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定された駅周辺の店舗一覧を取得します
         * @summary 駅周辺の店舗取得
         * @param {string} id 駅ID
         * @param {number} [limit] 取得件数制限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdShopsGet: async (id: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1StationsIdShopsGet', 'id', id)
            const localVarPath = `/api/v1/stations/{id}/shops`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新規駅を登録します
         * @summary 駅作成
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsPost: async (apiV1StationsPostRequest: ApiV1StationsPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiV1StationsPostRequest' is not null or undefined
            assertParamExists('apiV1StationsPost', 'apiV1StationsPostRequest', apiV1StationsPostRequest)
            const localVarPath = `/api/v1/stations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiV1StationsPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StationsApi - functional programming interface
 * @export
 */
export const StationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 全駅の一覧を取得します
         * @summary 駅一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [name] 駅名で部分一致検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsGet(limit?: number, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Station>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsGet(limit, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの駅を削除します
         * @summary 駅削除
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの駅詳細情報を取得
         * @summary 駅詳細取得
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定されたIDの駅情報を更新
         * @summary 駅情報更新
         * @param {string} id 駅ID
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsIdPut(id: string, apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsIdPut(id, apiV1StationsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定された駅周辺の店舗一覧を取得します
         * @summary 駅周辺の店舗取得
         * @param {string} id 駅ID
         * @param {number} [limit] 取得件数制限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsIdShopsGet(id: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Shop>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsIdShopsGet(id, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsIdShopsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 新規駅を登録します
         * @summary 駅作成
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1StationsPost(apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Station>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1StationsPost(apiV1StationsPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StationsApi.apiV1StationsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StationsApi - factory interface
 * @export
 */
export const StationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StationsApiFp(configuration)
    return {
        /**
         * 全駅の一覧を取得します
         * @summary 駅一覧取得
         * @param {number} [limit] 取得件数制限
         * @param {string} [name] 駅名で部分一致検索
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsGet(limit?: number, name?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Station>> {
            return localVarFp.apiV1StationsGet(limit, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの駅を削除します
         * @summary 駅削除
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiV1StationsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの駅詳細情報を取得
         * @summary 駅詳細取得
         * @param {string} id 駅ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.apiV1StationsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたIDの駅情報を更新
         * @summary 駅情報更新
         * @param {string} id 駅ID
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdPut(id: string, apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.apiV1StationsIdPut(id, apiV1StationsPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定された駅周辺の店舗一覧を取得します
         * @summary 駅周辺の店舗取得
         * @param {string} id 駅ID
         * @param {number} [limit] 取得件数制限
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsIdShopsGet(id: string, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<Shop>> {
            return localVarFp.apiV1StationsIdShopsGet(id, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 新規駅を登録します
         * @summary 駅作成
         * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1StationsPost(apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Station> {
            return localVarFp.apiV1StationsPost(apiV1StationsPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StationsApi - object-oriented interface
 * @export
 * @class StationsApi
 * @extends {BaseAPI}
 */
export class StationsApi extends BaseAPI {
    /**
     * 全駅の一覧を取得します
     * @summary 駅一覧取得
     * @param {number} [limit] 取得件数制限
     * @param {string} [name] 駅名で部分一致検索
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsGet(limit?: number, name?: string, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsGet(limit, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの駅を削除します
     * @summary 駅削除
     * @param {string} id 駅ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの駅詳細情報を取得
     * @summary 駅詳細取得
     * @param {string} id 駅ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたIDの駅情報を更新
     * @summary 駅情報更新
     * @param {string} id 駅ID
     * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsIdPut(id: string, apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsIdPut(id, apiV1StationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定された駅周辺の店舗一覧を取得します
     * @summary 駅周辺の店舗取得
     * @param {string} id 駅ID
     * @param {number} [limit] 取得件数制限
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsIdShopsGet(id: string, limit?: number, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsIdShopsGet(id, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新規駅を登録します
     * @summary 駅作成
     * @param {ApiV1StationsPostRequest} apiV1StationsPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StationsApi
     */
    public apiV1StationsPost(apiV1StationsPostRequest: ApiV1StationsPostRequest, options?: RawAxiosRequestConfig) {
        return StationsApiFp(this.configuration).apiV1StationsPost(apiV1StationsPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



